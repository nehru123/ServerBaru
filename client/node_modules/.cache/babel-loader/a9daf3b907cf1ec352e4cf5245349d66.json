{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\nimport setAuthToken from \"../components/utils/setAuthToken\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\"; // Register users\n\nexport const registerusers = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => history.push(\"/login\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // login get user token\n\nexport const loginuser = (userData, history) => dispatch => {\n  dispatch(setPostLoading());\n  axios.post(\"/api/users/login\", userData).then(res => {\n    console.log(\"====================================\");\n    console.log(\"Berhasil Response\");\n    console.log(\"====================================\"); // Save to local storage\n\n    const token = res.data.token; // set token to local storage\n\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth Header\n\n    setAuthToken(token); // decode token to get user data with jwt-decode\n\n    const decoded = jwt_decode(token); // set current user\n\n    dispatch(setCurrentUser(decoded)); // redirect\n\n    history.push(\"/home\");\n  }).catch(err => {\n    window.alert(\"login gagal\");\n    console.log(\"====================================\");\n    console.log(\"Catch\", err.response);\n    console.log(\"====================================\");\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // set logged user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // logout\n\nexport const logout = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove authorization token\n\n  setAuthToken(false); // isAuthenticated = false, by empty the current user\n\n  dispatch(setCurrentUser({}));\n};\nexport const setPostLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/nehrupriyambodo/Downloads/Baru/client/src/actions/authActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","USER_LOADING","setAuthToken","axios","jwt_decode","registerusers","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginuser","setPostLoading","console","log","token","localStorage","setItem","decoded","setCurrentUser","window","alert","logout","removeItem"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC9DL,EAAAA,KAAK,CACFM,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,EAGGC,KAHH,CAGSC,GAAG,IACRN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEhB,UADC;AAEPiB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACb,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC1DA,EAAAA,QAAQ,CAACY,cAAc,EAAf,CAAR;AACAjB,EAAAA,KAAK,CACFM,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACXU,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAHW,CAIX;;AAJW,UAKHC,KALG,GAKOZ,GAAG,CAACO,IALX,CAKHK,KALG,EAOX;;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EARW,CAUX;;AACArB,IAAAA,YAAY,CAACqB,KAAD,CAAZ,CAXW,CAYX;;AACA,UAAMG,OAAO,GAAGtB,UAAU,CAACmB,KAAD,CAA1B,CAbW,CAcX;;AACAf,IAAAA,QAAQ,CAACmB,cAAc,CAACD,OAAD,CAAf,CAAR,CAfW,CAgBX;;AACAnB,IAAAA,OAAO,CAACK,IAAR,CAAa,OAAb;AACD,GApBH,EAqBGC,KArBH,CAqBSC,GAAG,IAAI;AACZc,IAAAA,MAAM,CAACC,KAAP,CAAa,aAAb;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,GAAG,CAACG,QAAzB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAd,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEhB,UADC;AAEPiB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID,GA9BH;AA+BD,CAjCM,C,CAmCP;;AACA,OAAO,MAAMS,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLX,IAAAA,IAAI,EAAEf,gBADD;AAELgB,IAAAA,OAAO,EAAEU;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMI,MAAM,GAAG,MAAMtB,QAAQ,IAAI;AACtC;AACAgB,EAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB,EAFsC,CAGtC;;AACA7B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJsC,CAKtC;;AACAM,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM;AASP,OAAO,MAAMP,cAAc,GAAG,MAAM;AAClC,SAAO;AACLL,IAAAA,IAAI,EAAEd;AADD,GAAP;AAGD,CAJM","sourcesContent":["import { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\nimport setAuthToken from \"../components/utils/setAuthToken\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\n// Register users\nexport const registerusers = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// login get user token\nexport const loginuser = (userData, history) => dispatch => {\n  dispatch(setPostLoading());\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      console.log(\"====================================\");\n      console.log(\"Berhasil Response\");\n      console.log(\"====================================\");\n      // Save to local storage\n      const { token } = res.data;\n\n      // set token to local storage\n      localStorage.setItem(\"jwtToken\", token);\n\n      // Set token to Auth Header\n      setAuthToken(token);\n      // decode token to get user data with jwt-decode\n      const decoded = jwt_decode(token);\n      // set current user\n      dispatch(setCurrentUser(decoded));\n      // redirect\n      history.push(\"/home\");\n    })\n    .catch(err => {\n      window.alert(\"login gagal\");\n      console.log(\"====================================\");\n      console.log(\"Catch\", err.response);\n      console.log(\"====================================\");\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\n// set logged user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// logout\nexport const logout = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove authorization token\n  setAuthToken(false);\n  // isAuthenticated = false, by empty the current user\n  dispatch(setCurrentUser({}));\n};\n\nexport const setPostLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n"]},"metadata":{},"sourceType":"module"}